/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Role: "ADMIN" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Category: { // root type
    id: string; // ID!
    name: string; // String!
  }
  Mutation: {};
  Product: { // root type
    categoryId: string; // String!
    description: string; // String!
    id: string; // ID!
    name: string; // String!
    price: number; // Float!
  }
  Query: {};
  User: { // root type
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    password: string; // String!
    role?: NexusGenEnums['Role'] | null; // Role
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Category: { // field return type
    id: string; // ID!
    name: string; // String!
    products: Array<NexusGenRootTypes['Product'] | null> | null; // [Product]
  }
  Mutation: { // field return type
    createCategory: NexusGenRootTypes['Category'] | null; // Category
    createProduct: NexusGenRootTypes['Product'] | null; // Product
    createUser: NexusGenRootTypes['User'] | null; // User
    deleteCategory: boolean | null; // Boolean
    deleteProduct: boolean | null; // Boolean
    deleteUser: boolean | null; // Boolean
    updateCategory: NexusGenRootTypes['Category'] | null; // Category
    updateProduct: NexusGenRootTypes['Product'] | null; // Product
    updateUser: NexusGenRootTypes['User'] | null; // User
  }
  Product: { // field return type
    category: NexusGenRootTypes['Category'] | null; // Category
    categoryId: string; // String!
    description: string; // String!
    id: string; // ID!
    name: string; // String!
    price: number; // Float!
  }
  Query: { // field return type
    getAllCategories: Array<NexusGenRootTypes['Category'] | null> | null; // [Category]
    getAllUsers: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    getCategoryById: NexusGenRootTypes['Category'] | null; // Category
    getProductById: NexusGenRootTypes['Product'] | null; // Product
    getUserById: NexusGenRootTypes['User'] | null; // User
    productsByCategory: Array<NexusGenRootTypes['Product'] | null> | null; // [Product]
    searchProducts: Array<NexusGenRootTypes['Product'] | null> | null; // [Product]
  }
  User: { // field return type
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    password: string; // String!
    role: NexusGenEnums['Role'] | null; // Role
  }
}

export interface NexusGenFieldTypeNames {
  Category: { // field return type name
    id: 'ID'
    name: 'String'
    products: 'Product'
  }
  Mutation: { // field return type name
    createCategory: 'Category'
    createProduct: 'Product'
    createUser: 'User'
    deleteCategory: 'Boolean'
    deleteProduct: 'Boolean'
    deleteUser: 'Boolean'
    updateCategory: 'Category'
    updateProduct: 'Product'
    updateUser: 'User'
  }
  Product: { // field return type name
    category: 'Category'
    categoryId: 'String'
    description: 'String'
    id: 'ID'
    name: 'String'
    price: 'Float'
  }
  Query: { // field return type name
    getAllCategories: 'Category'
    getAllUsers: 'User'
    getCategoryById: 'Category'
    getProductById: 'Product'
    getUserById: 'User'
    productsByCategory: 'Product'
    searchProducts: 'Product'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
    password: 'String'
    role: 'Role'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCategory: { // args
      name: string; // String!
    }
    createProduct: { // args
      categoryId: string; // String!
      description: string; // String!
      name: string; // String!
      price: number; // Float!
    }
    createUser: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
      role?: string | null; // String
    }
    deleteCategory: { // args
      id: string; // String!
    }
    deleteProduct: { // args
      id: string; // String!
    }
    deleteUser: { // args
      id: string; // String!
    }
    updateCategory: { // args
      id: string; // String!
      name?: string | null; // String
    }
    updateProduct: { // args
      categoryId?: string | null; // String
      description?: string | null; // String
      id: string; // String!
      name?: string | null; // String
      price?: number | null; // Float
    }
    updateUser: { // args
      email: string; // String!
      id: string; // String!
      name: string; // String!
      password: string; // String!
    }
  }
  Query: {
    getCategoryById: { // args
      id: string; // String!
    }
    getProductById: { // args
      id: string; // String!
    }
    getUserById: { // args
      id: string; // String!
    }
    productsByCategory: { // args
      categoryId: string; // String!
    }
    searchProducts: { // args
      query: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}