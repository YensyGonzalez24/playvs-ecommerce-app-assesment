### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Category {
  """Unique identifier of the category."""
  id: ID!

  """Name of the category. It is unique across all categories."""
  name: String!
  products: [Product]
}

type Mutation {
  """Create a new category"""
  createCategory(
    """The name of the category"""
    name: String!
  ): Category

  """Create a new product"""
  createProduct(
    """The ID of the category the product belongs to"""
    categoryId: String!

    """The description of the product"""
    description: String!

    """The name of the product"""
    name: String!

    """The price of the product"""
    price: Float!
  ): Product

  """Create a new user"""
  createUser(
    """The email of the user (required)"""
    email: String!

    """The name of the user (required)"""
    name: String!

    """The password of the user (required)"""
    password: String!

    """The role of the user (optional)"""
    role: String
  ): User

  """Delete a category"""
  deleteCategory(
    """The ID of the category"""
    id: String!
  ): Boolean

  """Delete a product"""
  deleteProduct(
    """The ID of the product to delete"""
    id: String!
  ): Boolean

  """Delete an existing user"""
  deleteUser(
    """The ID of the user to delete (required)"""
    id: String!
  ): Boolean

  """Update an existing category"""
  updateCategory(
    """The ID of the category"""
    id: String!

    """The new name of the category"""
    name: String
  ): Category

  """Update an existing product"""
  updateProduct(
    """The updated ID of the category the product belongs to"""
    categoryId: String

    """The updated description of the product"""
    description: String

    """The ID of the product to update"""
    id: String!

    """The updated name of the product"""
    name: String

    """The updated price of the product"""
    price: Float
  ): Product

  """Update an existing user"""
  updateUser(
    """The updated email of the user (required)"""
    email: String!

    """The ID of the user to update (required)"""
    id: String!

    """The updated name of the user (required)"""
    name: String!

    """The updated password of the user (required)"""
    password: String!
  ): User
}

type Product {
  category: Category

  """Foreign key to the category the product belongs to."""
  categoryId: String!

  """Description of the product."""
  description: String!

  """Unique identifier of the product."""
  id: ID!

  """Name of the product."""
  name: String!

  """Price of the product."""
  price: Float!
}

type Query {
  """Returns all categories"""
  getAllCategories: [Category]

  """Get all users"""
  getAllUsers: [User]

  """Returns a single category by its ID"""
  getCategoryById(
    """The ID of the category"""
    id: String!
  ): Category
  getProductById(id: String!): Product

  """Get a user by ID"""
  getUserById(
    """The ID of the user"""
    id: String!
  ): User
  productsByCategory(categoryId: String!): [Product]
  searchProducts(query: String!): [Product]
}

enum Role {
  ADMIN
  USER
}

type User {
  """Email address of the user. It is unique across all users."""
  email: String!

  """Unique identifier of the user."""
  id: ID!

  """Name of the user."""
  name: String!

  """Password of the user. Stored as a hashed value."""
  password: String!
  role: Role
}